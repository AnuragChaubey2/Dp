class Array1{
    public static void main(String[] args){
        int[][] ar={{0,6,0},{5,8,7},{0,9,0}};
        System.out.println(getMaximumGold(ar));
    }
    
    //BackTracking Dfs solution
    public static int getMaximumGold(int[][] grid) {
     boolean[][] visited=new boolean[grid.length][grid[0].length];
    
    int maxGold=0;
    
    for(int i=0;i<grid.length;i++)
    {
       for(int j=0;j<grid[0].length;j++)
       {
            if(grid[i][j]!=0)
            {
              int locGold=fxn(i,j,grid,visited);
              maxGold=Math.max(locGold,maxGold);
            }
       }
    }
    
       return maxGold;

    
}

public static int  fxn(int i,int j,int[][] grid,boolean[][] visited)
{
       if(i<0 || j<0 || i==grid.length || j==grid[0].length || grid[i][j]==0 || visited[i][j]==true)
           return 0;
    
    visited[i][j]=true;
    
    int l=fxn(i,j-1,grid,visited);
    int r=fxn(i,j+1,grid,visited);
    int u=fxn(i+1,j,grid,visited);
    int d=fxn(i-1,j,grid,visited);
    
    int maxOfAllDir=Math.max(u,Math.max(r,Math.max(l,d)));
    
    visited[i][j]=false;
    
    return maxOfAllDir+grid[i][j];
    
}
}
